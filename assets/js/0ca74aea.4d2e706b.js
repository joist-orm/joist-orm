"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4822],{5698:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>n,metadata:()=>a,toc:()=>d});var i=s(4246),o=s(1670);const n={title:"No Ugly Queries",sidebar_position:5},r=void 0,a={id:"goals/no-ugly-queries",title:"No Ugly Queries",description:'Historically, ORMs have a reputation for creating "ugly queries", particularly when the ORM\'s query API adds too much abstraction on top of raw SQL, and what "looks simple" in the query API is actually a big, gnarly SQL string that no programmer would ever write by hand.',source:"@site/docs/goals/no-ugly-queries.md",sourceDirName:"goals",slug:"/goals/no-ugly-queries",permalink:"/docs/goals/no-ugly-queries",draft:!1,unlisted:!1,editUrl:"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/goals/no-ugly-queries.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"No Ugly Queries",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Great Tests",permalink:"/docs/goals/great-tests"},next:{title:"Why Entities?",permalink:"/docs/modeling/why-entities"}},l={},d=[{value:"Use mostly Joist, with some custom",id:"use-mostly-joist-with-some-custom",level:2},{value:"What we don&#39;t support",id:"what-we-dont-support",level:2}];function u(e){const t={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:'Historically, ORMs have a reputation for creating "ugly queries", particularly when the ORM\'s query API adds too much abstraction on top of raw SQL, and what "looks simple" in the query API is actually a big, gnarly SQL string that no programmer would ever write by hand.'}),"\n",(0,i.jsx)(t.p,{children:"These ugly queries can cause multiple issues:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Performance issues b/c of their arcane output can't be optimized by the database,"}),"\n",(0,i.jsx)(t.li,{children:"Logic issues (bugs) b/c the generated SQL that doesn't actually do what the programmer meant (leaky abstractions), and"}),"\n",(0,i.jsx)(t.li,{children:"Just look weird in general."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"And have caused a backlash of programmers who insist on writing every SQL query by hand."}),"\n",(0,i.jsxs)(t.p,{children:["Joist asserts this is a ",(0,i.jsx)(t.strong,{children:"false dichotomy"}),"; we shouldn't have to choose between:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:'"Handwriting every line of SQL in our app", and'}),"\n",(0,i.jsx)(t.li,{children:'"The ORM generates ugly queries"'}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"How does Joist solve this? By not trying so hard."}),"\n",(0,i.jsx)(t.h2,{id:"use-mostly-joist-with-some-custom",children:"Use mostly Joist, with some custom"}),"\n",(0,i.jsx)(t.p,{children:'Joist "solves" ugly queries by just never even attempting them: it\'s a non-goal for Joist to own "every SQL query in your app".'}),"\n",(0,i.jsxs)(t.p,{children:["Granted, we think Joist's graph navigation & ",(0,i.jsx)(t.code,{children:"em.find"})," APIs are powerful, ergonomic, and should be ",(0,i.jsx)(t.strong,{children:"the large majority"}),' of SQL queries in your app: "get this author\'s books", "load the books & reviews & their ratings", "load the Nth page of authors with the given filters", etc.']}),"\n",(0,i.jsxs)(t.p,{children:["However, we've limited them to ",(0,i.jsx)(t.strong,{children:'only features that can be implemented with "obviously boring SQL"'}),"."]}),"\n",(0,i.jsx)(t.p,{children:'Instead, for any of your queries that are truly custom, and doing "hard, complicated things", it\'s perfectly fine to use a separate, lower-level query builder, or even raw SQL strings, to issue complicated queries.'}),"\n",(0,i.jsx)(t.p,{children:"These lower-level APIs put you in full-control of the SQL, at the cost of more verbosity and complexity--but sometimes that is the right tradeoff!"}),"\n",(0,i.jsxs)(t.admonition,{type:"tip",children:[(0,i.jsxs)(t.p,{children:["In one production Joist codebase, approximately 95% of the SQL queries were Joist-created graph navigation & ",(0,i.jsx)(t.code,{children:"em.find"})," queries, and 5% were handwritten custom Knex queries."]}),(0,i.jsx)(t.p,{children:'This ratio will vary between codebases, but we feel confident it will be over 80%, and that the succinctness of using Joist for these 80-95% cases (with their guarantee to be "not ugly"), is a big productivity win.'})]}),"\n",(0,i.jsx)(t.h2,{id:"what-we-dont-support",children:"What we don't support"}),"\n",(0,i.jsx)(t.p,{children:"Specifically, today Joist does not support:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Common Table Expressions"}),"\n",(0,i.jsx)(t.li,{children:"Group bys, aggregates, sums, havings"}),"\n",(0,i.jsx)(t.li,{children:"Loading/processing any query results that aren't entities"}),"\n",(0,i.jsx)(t.li,{children:"Probably much more"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Granted, we don't want to undersell our ",(0,i.jsx)(t.code,{children:"em.find"}),' API (it is great), but nor have we set out to "build a DSL to create every SQL query ever".']}),"\n",(0,i.jsx)(t.p,{children:"That is just not Joist's strength--our strength is ergonomically representing complicated business domains, and enforcing complicated business constraints, and that is a hard enough problem as it is. :-)"}),"\n",(0,i.jsx)(t.p,{children:"Instead, we encourage you to use lower-level libraries like Knex for your app's custom queries."}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsx)(t.p,{children:"Obviously having multiple full-fledged libraries, i.e. Joist for the domain model and Kysley for low-level queries, is not a great solution, and probably overkill."}),(0,i.jsx)(t.p,{children:"Personally, we use Knex for our low-level custom queries (those 5%), because it's lightweight and sufficiently ergonomic."}),(0,i.jsxs)(t.p,{children:['Joist may eventually provide a "raw SQL" query builder, that is Knex-ish, but it will be a completely separate API from ',(0,i.jsx)(t.code,{children:"em.find"}),", to avoid any slippery slopes to ",(0,i.jsx)(t.code,{children:"em.find"}),' becoming a leaky abstraction and creating "ugly queries".']})]})]})}function c(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},1670:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>r});var i=s(7378);const o={},n=i.createContext(o);function r(e){const t=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(n.Provider,{value:t},e.children)}}}]);