"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[307],{211:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=n(4246),o=n(1670);const i={title:"Test Utils",sidebar_position:5},r=void 0,a={id:"testing/test-utils",title:"Test Utils",description:"run Helper Method",source:"@site/docs/testing/test-utils.md",sourceDirName:"testing",slug:"/testing/test-utils",permalink:"/docs/testing/test-utils",draft:!1,unlisted:!1,editUrl:"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/testing/test-utils.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Test Utils",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Custom Jest Matcher",permalink:"/docs/testing/entity-matcher"}},c={},d=[{value:"<code>run</code> Helper Method",id:"run-helper-method",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h2,{id:"run-helper-method",children:[(0,s.jsx)(t.code,{children:"run"})," Helper Method"]}),"\n",(0,s.jsxs)(t.p,{children:["While the ",(0,s.jsx)(t.code,{children:"DeepNew"})," provided by Joist's ",(0,s.jsx)(t.a,{href:"/docs/testing/test-factories",children:"test factories"})," allows ergonomically asserting against entities without ",(0,s.jsx)(t.code,{children:"await"}),"s, it assumes that no other code (i.e. a separate ",(0,s.jsx)(t.code,{children:"EntityManager"}),") has mutated the entities in the underlying database."]}),"\n",(0,s.jsxs)(t.p,{children:['However, often it\'s desirable for your code-under-test to have a "clean slate" ',(0,s.jsx)(t.code,{children:"EntityManager"})," that starts out completely empty, and isn't affected by your test's own setup code / own ",(0,s.jsx)(t.code,{children:"EntityManager"}),", to avoid missing production bugs that only passed the tests b/c of a side effect in the test's ",(0,s.jsx)(t.code,{children:"EntityManager"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["To support this, Joist provides a ",(0,s.jsx)(t.code,{children:"run"})," function that will, given your test's ",(0,s.jsx)(t.code,{children:"em"}),", create a new ",(0,s.jsx)(t.code,{children:"EntityManager"})," and run the code-under-test against it:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'import { run } from "joist-test-utils";\n\nit("creates a book", async () => {\n  const em = newEntityManager();\n  // Given an author\n  const a = newAuthor(em);\n  // When we perform the business logic\n  await run(em, (em) => performPostBook(em, { title: "t1" }));\n  // Then we have a new book\n  expect(a.books.get.length).toEqual(1);\n  // And it has the right title\n  expect(a.books.get[0].title).toEqual("t1");\n});\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Furthermore, after the ",(0,s.jsx)(t.code,{children:"performPostBook"})," is executed, ",(0,s.jsx)(t.code,{children:"run"})," will ",(0,s.jsx)(t.strong,{children:"automatically refresh all entities"})," in your test's ",(0,s.jsx)(t.code,{children:"EntityManager"}),", so that they see the latest values that the code-under-test's ",(0,s.jsx)(t.code,{children:"EntityManager"})," committed to the database."]}),"\n",(0,s.jsxs)(t.p,{children:["This means we can immediately assert against ",(0,s.jsx)(t.code,{children:"a.books.get"}),' without needing to load "a 2nd ',(0,s.jsx)(t.code,{children:"Author"}),'" instance for the same row, which can be really common in tests that interact with a stateful database:']}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"const a1 = newAuthor(em);\nawait performPostBook(em);\n// Example of what we _don't_ need to do: reload a1\nawait a1_2 = em.load(Author, a1.id);\nexpect(a.books.get.length).toEqual(1);\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"run"})," accomplishes this by calling the ",(0,s.jsx)(t.code,{children:"EntityManager.refresh"})," method, which reloads all currently-loaded entities from the database."]})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1670:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var s=n(7378);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);