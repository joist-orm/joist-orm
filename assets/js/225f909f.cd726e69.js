"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2760],{3023:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(3696);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},8956:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"advanced/transform-properties","title":"Properties Transform","description":"A key feature of Joist is defining custom properties on your domain model, i.e. hasOneThrough, hasManyThrough, hasAsyncProperty, hasReactiveField, etc.","source":"@site/docs/advanced/transform-properties.md","sourceDirName":"advanced","slug":"/advanced/transform-properties","permalink":"/docs/advanced/transform-properties","draft":false,"unlisted":false,"editUrl":"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/advanced/transform-properties.md","tags":[],"version":"current","sidebarPosition":35,"frontMatter":{"title":"Properties Transform","sidebar_position":35},"sidebar":"tutorialSidebar","previous":{"title":"Full Text Search","permalink":"/docs/advanced/full-text-search"},"next":{"title":"graphql-filters","permalink":"/docs/advanced/graphql-filters"}}');var o=t(2540),r=t(3023);const i={title:"Properties Transform",sidebar_position:35},a=void 0,c={},d=[];function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["A key feature of Joist is defining custom properties on your domain model, i.e. ",(0,o.jsx)(n.code,{children:"hasOneThrough"}),", ",(0,o.jsx)(n.code,{children:"hasManyThrough"}),", ",(0,o.jsx)(n.code,{children:"hasAsyncProperty"}),", ",(0,o.jsx)(n.code,{children:"hasReactiveField"}),", etc."]}),"\n",(0,o.jsx)(n.p,{children:"While these properties are powerful, Joist's current API involves defining them as properties directly on each instance of an entity, i.e.:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export class Author extends AuthorCodegen {\n  readonly reviews: Collection<Author, BookReview> = hasManyThrough((a) => a.books.reviews);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This means that if you load 1,000 ",(0,o.jsx)(n.code,{children:"Author"})," rows from the database, there will be 1,000 ",(0,o.jsx)(n.code,{children:"hasManyThrough"})," relations initialized, even if this particular endpoint/codepath doesn't end up accessing them."]}),"\n",(0,o.jsx)(n.p,{children:"In the majority of scenarios, this is fine, but when loading ~1,000s of entities, it can become a performance issue."}),"\n",(0,o.jsxs)(n.p,{children:["To address this, Joist provides a ",(0,o.jsx)(n.a,{href:"https://github.com/nonara/ts-patch",children:"ts-patch"})," transformer that will rewrite the fields into lazy getters on the ",(0,o.jsx)(n.code,{children:"Author"})," prototype, i.e. the above code will become:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"export class Author extends AuthorCodegen {\n  get reviews() {\n    return this.__data.relations.reviews ??= hasManyThrough((a) => a.books.reviews);\n  }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["And since the ",(0,o.jsx)(n.code,{children:"get reviews"})," becomes defined on the ",(0,o.jsx)(n.code,{children:"Author"})," prototype, there is no instance-level overhead until code specifically wants to access an author's ",(0,o.jsx)(n.code,{children:"reviews"}),", at which point the ",(0,o.jsx)(n.code,{children:"hasManyThrough"})," relation is lazy initialized."]}),"\n",(0,o.jsxs)(n.p,{children:["To enable this, add the following to your ",(0,o.jsx)(n.code,{children:"tsconfig.json"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "plugins": [\n      { "transform": "joist-transform-properties", "type": "raw" }\n    ]\n  }\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["And then compile your production code with ",(0,o.jsx)(n.code,{children:"tspc"})," instead of the raw ",(0,o.jsx)(n.code,{children:"tsc"})," command."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);