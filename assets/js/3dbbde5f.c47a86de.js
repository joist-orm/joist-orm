"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1456],{2282:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var a=t(4246),i=t(1670);const s={title:"Async Disposable",sidebar_position:10},o=void 0,r={id:"advanced/using",title:"Async Disposable",description:"Joist's EntityManager can be used with the new using keyword in TypeScript 5.2, to auto-flush changes to the database.",source:"@site/docs/advanced/using.md",sourceDirName:"advanced",slug:"/advanced/using",permalink:"/docs/advanced/using",draft:!1,unlisted:!1,editUrl:"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/advanced/using.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Async Disposable",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Single Table Inheritance",permalink:"/docs/advanced/single-table-inheritance"},next:{title:"Full Text Search",permalink:"/docs/advanced/full-text-search"}},c={},d=[];function l(e){const n={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Joist's ",(0,a.jsx)(n.code,{children:"EntityManager"})," can be used with the new ",(0,a.jsx)(n.code,{children:"using"})," keyword in TypeScript 5.2, to auto-",(0,a.jsx)(n.code,{children:"flush"})," changes to the database."]}),"\n",(0,a.jsxs)(n.p,{children:["For example, in a method that creates an ",(0,a.jsx)(n.code,{children:"EntityManager"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'async function performWork() {\n  // Create an EntityManager w/your context & driver\n  await using em = new EntityManager({}, driver);\n  // Load an entity\n  const a1 = await em.load(Author, "a:1");\n  // Make any mutations\n  a1.firstName = "a2";\n  // That\'s it; `em.flush` will be called automatically\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Note that the ",(0,a.jsx)(n.code,{children:"em.flush"})," method can fail if any validation rules are invalid, or any errors occur while running hooks, in which case the caller of ",(0,a.jsx)(n.code,{children:"performWork"})," would get a rejected promise."]}),"\n",(0,a.jsxs)(n.admonition,{type:"caution",children:[(0,a.jsxs)(n.p,{children:["As a disclaimer, the ",(0,a.jsx)(n.code,{children:"using"})," statement is new, so we're not 100% sure if it's usage will end up being idiomatic or not."]}),(0,a.jsxs)(n.p,{children:["For example, it's common to do an explicit ",(0,a.jsx)(n.code,{children:"em.flush"})," to ensure changes are committed to the database, any reactivity within the domain model has been executed, and only then build out a return value, i.e. a GraphQL result or REST response payload."]}),(0,a.jsxs)(n.p,{children:["If you build a GraphQL result or REST payload before executing ",(0,a.jsx)(n.code,{children:"em.flush"}),", you risk building it based on values that will be changed by hooks & derived values, so just keep that in mind."]}),(0,a.jsxs)(n.p,{children:["The best practice is to ensure ",(0,a.jsx)(n.code,{children:"em.flush"})," is ran before creating response values."]})]})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},1670:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var a=t(7378);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);