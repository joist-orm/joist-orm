"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[651],{9430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>d,toc:()=>o});var s=n(4246),i=n(1670);const a={title:"Changed Fields",sidebar_position:4},r=void 0,d={id:"features/changed-fields",title:"Changed Fields",description:"Each entity tracks which of its fields has changed within the current unit of work/EntityManager:",source:"@site/docs/features/changed-fields.md",sourceDirName:"features",slug:"/features/changed-fields",permalink:"/docs/features/changed-fields",draft:!1,unlisted:!1,editUrl:"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/features/changed-fields.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Changed Fields",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Find Queries",permalink:"/docs/features/queries-find"},next:{title:"Cascading Deletes",permalink:"/docs/features/cascade-deletes"}},c={},o=[{value:"Audit Trails",id:"audit-trails",level:3}];function h(e){const t={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Each entity tracks which of its fields has changed within the current unit of work/",(0,s.jsx)(t.code,{children:"EntityManager"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:'const a1 = em.load(Author, "1");\n\n// Nothing has changed at first\nexpect(a1.changes.firstName.hasChanged).toBe(false);\n\n// Now perform some business logic\na1.firstName = "a2";\n\n// And the field shows up has changed\nexpect(a1.changes.firstName.hasChanged).toBe(true);\nexpect(a1.changes.firstName.originalValue).toEqual("a1");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"changes"})," API has three methods:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"changes.firstName.hasChanged"})," - is ",(0,s.jsx)(t.code,{children:"true"})," whenever ",(0,s.jsx)(t.code,{children:"firstName"})," has been set, either on a new entity or an existing entity"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"changes.firstName.hasUpdated"})," - is ",(0,s.jsx)(t.code,{children:"true"})," only when ",(0,s.jsx)(t.code,{children:"firstName"})," has been changed on an existing entity"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"changes.firstName.originalValue"})," - is the original value, only for an existing entity"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"audit-trails",children:"Audit Trails"}),"\n",(0,s.jsxs)(t.p,{children:["Note the ",(0,s.jsx)(t.code,{children:"changes"})," API is only for the current in-memory changes being made to an entity, it's not an audit trail."]}),"\n",(0,s.jsxs)(t.p,{children:["That said, Joist entities can be used with 3rd-party audit trail solutions like ",(0,s.jsx)(t.a,{href:"https://pgxn.org/dist/cyanaudit/",children:"CyanAudit"}),"."]})]})}function l(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1670:(e,t,n)=>{n.d(t,{a:()=>r});var s=n(7378);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);