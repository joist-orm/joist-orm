"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[925],{1130:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=s(4246),n=s(1670);const o={title:"Fast Database Resets",sidebar_position:1},i=void 0,r={id:"testing/fast-database-resets",title:"Fast Database Resets",description:"To reset the database between each unit test, Joist's joist-codegen command generates a flush_database stored procedure  that will delete all rows/reset the sequence ids:",source:"@site/docs/testing/fast-database-resets.md",sourceDirName:"testing",slug:"/testing/fast-database-resets",permalink:"/docs/testing/fast-database-resets",draft:!1,unlisted:!1,editUrl:"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/testing/fast-database-resets.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Fast Database Resets",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Test Factories",permalink:"/docs/testing/test-factories"},next:{title:"Custom Jest Matcher",permalink:"/docs/testing/entity-matcher"}},c={},d=[{value:"What About Per-Test Transactions?",id:"what-about-per-test-transactions",level:3}];function l(e){const t={code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["To reset the database between each unit test, Joist's ",(0,a.jsx)(t.code,{children:"joist-codegen"})," command generates a ",(0,a.jsx)(t.code,{children:"flush_database"})," stored procedure [^1] that will delete all rows/reset the sequence ids:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'await knex.select(knex.raw("flush_database()"));\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This is generated at the end of the ",(0,a.jsx)(t.code,{children:"joist-codegen"}),", which should only be invoked against local development databases, i.e. this function should never exist in your production database. It is only for local testing."]}),"\n",(0,a.jsxs)(t.p,{children:["Your test suite should invoke this ",(0,a.jsx)(t.code,{children:"knex.select"})," command in a suite-test ",(0,a.jsx)(t.code,{children:"beforeEach"}),"."]}),"\n",(0,a.jsx)(t.h3,{id:"what-about-per-test-transactions",children:"What About Per-Test Transactions?"}),"\n",(0,a.jsxs)(t.p,{children:["As an alternative to Joist's ",(0,a.jsx)(t.code,{children:"flush_database"})," approach, some ORMs invoke tests in a transaction, and then rollback the transaction before the next test (i.e. Rails does this)."]}),"\n",(0,a.jsx)(t.p,{children:"However, this has a few downsides:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["Debugging failed tests is more difficult b/c the data you want to investigate via ",(0,a.jsx)(t.code,{children:"psql"})," has disappeared/been rolled back, and"]}),"\n",(0,a.jsx)(t.li,{children:"Your tests cannot test any behavior that uses transactions."}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["For this reasons, Joist prefers the ",(0,a.jsx)(t.code,{children:"flush_database"})," approach, however you could still use the transaction-per-test approach by putting ",(0,a.jsx)(t.code,{children:"BEGIN"})," and ",(0,a.jsx)(t.code,{children:"ROLLBACK"})," commands in your project's ",(0,a.jsx)(t.code,{children:"beforeEach"}),"/",(0,a.jsx)(t.code,{children:"afterEach"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["[^1] ",(0,a.jsx)(t.code,{children:"flush_database"})," is the only stored procedure that Joist uses, and opting for a stored procedure is solely an optimization (1 SQL statement to reset all tables) to keep tests as fast as possible."]})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},1670:(e,t,s)=>{s.d(t,{Z:()=>r,a:()=>i});var a=s(7378);const n={},o=a.createContext(n);function i(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);