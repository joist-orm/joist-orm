"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[152],{4243:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var s=t(4246),i=t(1670);const o={title:"Installation",slug:"/getting-started",sidebar_position:1},a=void 0,r={id:"getting-started/installation",title:"Installation",description:"Installing Joist in your project has four main steps:",source:"@site/docs/getting-started/installation.md",sourceDirName:"getting-started",slug:"/getting-started",permalink:"/docs/getting-started",draft:!1,unlisted:!1,editUrl:"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/getting-started/installation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Installation",slug:"/getting-started",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Quick Tour",permalink:"/docs/getting-started/tour"},next:{title:"Schema Assumptions",permalink:"/docs/getting-started/schema-assumptions"}},c={},d=[{value:"Setting up your database",id:"setting-up-your-database",level:2},{value:"Setting up migrations",id:"setting-up-migrations",level:3},{value:"Setting up <code>joist-codegen</code>",id:"setting-up-joist-codegen",level:2},{value:"Setting up your tests",id:"setting-up-your-tests",level:2},{value:"Setting up your production code",id:"setting-up-your-production-code",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Installing Joist in your project has four main steps:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Setting up your database"}),"\n",(0,s.jsxs)(n.li,{children:["Setting up ",(0,s.jsx)(n.code,{children:"joist-codegen"})]}),"\n",(0,s.jsx)(n.li,{children:"Setting up your tests"}),"\n",(0,s.jsx)(n.li,{children:"Setting up your production code"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"A wrinkle is that each Node.js application can be pretty different, in terms of how you manage your local database (i.e. with Docker Compose), what your production application looks like (a REST API, a GraphQL API, etc.), etc."}),"\n",(0,s.jsxs)(n.p,{children:["So, to simplify this page, we'll include some assumptions based on the ",(0,s.jsx)(n.a,{href:"https://github.com/joist-orm/joist-orm-sample",children:"Joist sample app"}),", but you should be able to adjust these steps to your specific project."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"If you want a faster intro than this page, you should be able to check out the sample app, run the commands in its readme, and just start poking around."})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Joist requires Node 18."})}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-your-database",children:"Setting up your database"}),"\n",(0,s.jsxs)(n.p,{children:["The sample app uses ",(0,s.jsx)(n.code,{children:"docker compose"})," and a ",(0,s.jsx)(n.code,{children:"db.dockerfile"})," file to manage the local Postgres database."]}),"\n",(0,s.jsxs)(n.p,{children:["To start it, clone the ",(0,s.jsx)(n.a,{href:"https://github.com/joist-orm/joist-orm-sample",children:"sample app"}),", and run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker compose build db\ndocker compose up -d db\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"docker-compose.yml"})," exposes the ",(0,s.jsx)(n.code,{children:"sample_app"})," database on port ",(0,s.jsx)(n.code,{children:"5342"}),", so it is accessible with an environment variable of:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-env",children:"DATABASE_URL=postgres://sample_user:local@localhost:5432/sample_app\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The following steps will assume your database is available at this location (it is already set in the sample app's ",(0,s.jsx)(n.code,{children:"env/local.env"})," file), but you can set ",(0,s.jsx)(n.code,{children:"DATABASE_URL"})," to whatever is appropriate for your application."]}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-migrations",children:"Setting up migrations"}),"\n",(0,s.jsxs)(n.p,{children:["You should also set up a migrations library to manage your database schema; the Joist sample app uses ",(0,s.jsx)(n.a,{href:"https://github.com/salsita/node-pg-migrate",children:"node-pg-migrate"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you do use ",(0,s.jsx)(n.code,{children:"node-pg-migrate"})," as well, you can install Joist's ",(0,s.jsx)(n.code,{children:"node-pg-migrate"}),"-based helper methods (like ",(0,s.jsx)(n.code,{children:"createEntityTable"}),", ",(0,s.jsx)(n.code,{children:"createEnumTable"}),", ",(0,s.jsx)(n.code,{children:"createManyToManyTable"}),", etc.):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm add --save-dev joist-migration-utils\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And add ",(0,s.jsx)(n.code,{children:"joist-migrate"})," and ",(0,s.jsx)(n.code,{children:"joist-new-migration"})," commands to your ",(0,s.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "joist-migrate": "env-cmd tsx ./node_modules/joist-migration-utils",\n    "joist-new-migration": "npx node-pg-migrate create"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The sample app uses ",(0,s.jsx)(n.code,{children:"env-cmd"})," to load the environment variables from ",(0,s.jsx)(n.code,{children:".env"})," before running ",(0,s.jsx)(n.code,{children:"joist-migration-utils"}),", and ",(0,s.jsx)(n.code,{children:"tsx"})," to transpile the migration's ",(0,s.jsx)(n.code,{children:"*.ts"})," code to JavaScript, but if you don't like that, you can manage your application's environment variables however you like."]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["Invoking Joist's ",(0,s.jsx)(n.code,{children:"joist-migration-utils"})," is really just a tiny wrapper around ",(0,s.jsx)(n.code,{children:"node-pg-migrate"})," that:"]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Reads the connection config from either a single ",(0,s.jsx)(n.code,{children:"DATABASE_URL"})," or multiple ",(0,s.jsx)(n.code,{children:"DB_HOST"}),", ",(0,s.jsx)(n.code,{children:"DB_PORT"}),", ",(0,s.jsx)(n.code,{children:"DB_DATABASE"}),", ",(0,s.jsx)(n.code,{children:"DB_USER"}),", and ",(0,s.jsx)(n.code,{children:"DB_PASSWORD"})," environment variables"]}),"\n",(0,s.jsxs)(n.li,{children:['Runs the "up" command against the ',(0,s.jsx)(n.code,{children:"migrations/"})," directory"]}),"\n"]}),(0,s.jsxs)(n.p,{children:["If you want to invoke ",(0,s.jsx)(n.code,{children:"node-pg-migrate"}),"'s ",(0,s.jsx)(n.a,{href:"https://salsita.github.io/node-pg-migrate/#/cli",children:"cli"})," directly instead, that's just fine."]})]}),"\n",(0,s.jsx)(n.p,{children:"Now we can apply migrations by running:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run joist-migrate\n"})}),"\n",(0,s.jsx)(n.p,{children:"The sample app also supports resetting the database schema (so you can re-run the migrations from scratch) by running:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker compose exec db ./reset.sh\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["While we used ",(0,s.jsx)(n.code,{children:"node-pg-migrate"})," for this section, Joist is agnostic to your migration tool and will codegen based on your database schema, so you're welcome to use ",(0,s.jsx)(n.a,{href:"https://github.com/salsita/node-pg-migrate",children:"node-pg-migrate"}),", Knex's ",(0,s.jsx)(n.a,{href:"http://knexjs.org/guide/migrations.html#migration-cli",children:"migrations"}),", or another tool for migrations/schema management."]})}),"\n",(0,s.jsxs)(n.admonition,{type:"tip",children:[(0,s.jsxs)(n.p,{children:["As a quirk of ",(0,s.jsx)(n.code,{children:"node-pg-migrate"}),", the first migration that it creates via ",(0,s.jsx)(n.code,{children:"joist-new-migration"})," will always be a ",(0,s.jsx)(n.code,{children:".js"})," file."]}),(0,s.jsxs)(n.p,{children:["Once you rename that first migration to a ",(0,s.jsx)(n.code,{children:".ts"})," file, all subsequent migrations will be created as ",(0,s.jsx)(n.code,{children:".ts"})," files."]})]}),"\n",(0,s.jsxs)(n.h2,{id:"setting-up-joist-codegen",children:["Setting up ",(0,s.jsx)(n.code,{children:"joist-codegen"})]}),"\n",(0,s.jsxs)(n.p,{children:["Install the ",(0,s.jsx)(n.code,{children:"joist-codegen"})," package as a dev dependency and add a ",(0,s.jsx)(n.code,{children:"joist-codegen"})," script to your ",(0,s.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm add --save-dev joist-codegen\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "scripts": {\n    "joist-codegen": "env-cmd tsx ./node_modules/joist-codegen"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This again uses ",(0,s.jsx)(n.code,{children:"env-cmd"}),", as ",(0,s.jsx)(n.code,{children:"joist-codegen"})," will use the ",(0,s.jsx)(n.code,{children:"DATABASE_URL"})," environment variable to connect to your local database."]}),"\n",(0,s.jsxs)(n.p,{children:["Now, anytime you make schema changes (i.e. by running ",(0,s.jsx)(n.code,{children:"npm run joist-migrate"}),"), you can also run ",(0,s.jsx)(n.code,{children:"joist-codegen"})," to create/update your domain model:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run joist-codegen\n"})}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-your-tests",children:"Setting up your tests"}),"\n",(0,s.jsxs)(n.p,{children:["We want each test to get a clean/fresh database, so we should set up a ",(0,s.jsx)(n.code,{children:"beforeEach"})," to invoke our local-only ",(0,s.jsx)(n.code,{children:"flush_database"})," command:"]}),"\n",(0,s.jsxs)(n.p,{children:["The sample app does this via a ",(0,s.jsx)(n.code,{children:"setupTests.ts"})," file that will be used for all tests:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { EntityManager } from "src/entities";\nimport { knex as createKnex, Knex } from "knex";\nimport { PostgresDriver } from "joist-orm";\nimport { newPgConnectionConfig } from "joist-utils";\n\nlet knex: Knex;\n\n// Knex is used as a single/global connection pool + query builder\nfunction getKnex(): Knex {\n  return (knex ??= createKnex({\n    client: "pg",\n    connection: newPgConnectionConfig() as any,\n    debug: false,\n    asyncStackTraces: true,\n  }));\n}\n\nexport function newEntityManager(): EntityManager {\n  return new EntityManager({}, new PostgresDriver(getKnex()));\n}\n\nbeforeEach(async () => {\n  const knex = await getKnex();\n  await knex.select(knex.raw("flush_database()"));\n});\n\nafterAll(async () => {\n  if (knex) {\n    await knex.destroy();\n  }\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"newPgConnectionConfig"})," helper method from ",(0,s.jsx)(n.code,{children:"joist-utils"})," also uses the ",(0,s.jsx)(n.code,{children:"DATABASE_URL"})," environment variable, which we can have loaded into the Jest process by using ",(0,s.jsx)(n.code,{children:"env-cmd"})," in a ",(0,s.jsx)(n.code,{children:"setupTestEnv.js"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { GetEnvVars } from "env-cmd";\n\nexport default async function globalSetup() {\n  Object.entries(await GetEnvVars()).forEach(([key, value]) => (process.env[key] = value));\n};\n'})}),"\n",(0,s.jsxs)(n.p,{children:["And then configure ",(0,s.jsx)(n.code,{children:"jest.config.js"})," to use both files:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'module.exports = {\n  preset: "ts-jest",\n  globalSetup: "<rootDir>/src/setupTestEnv.ts",\n  setupFilesAfterEnv: ["<rootDir>/src/setupTests.ts"],\n  testMatch: ["<rootDir>/src/**/*.test.{ts,tsx,js,jsx}"],\n  moduleNameMapper: {\n    "^src(.*)": "<rootDir>/src$1",\n  },\n};\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["While Joist's ",(0,s.jsx)(n.code,{children:"newPgConnectionConfig"})," uses the same environment variable convention as ",(0,s.jsx)(n.code,{children:"joist-codegen"}),", with the idea that your app's production environment variables will be set automatically by your deployment infra (i.e. in the style of ",(0,s.jsx)(n.a,{href:"https://12factor.net/",children:"Twelve Factor Applications"}),"), you're free to configure ",(0,s.jsx)(n.code,{children:"Knex"})," with whatever idiomatic configuration looks like for your app."]}),(0,s.jsxs)(n.p,{children:["See the ",(0,s.jsx)(n.a,{href:"http://knexjs.org/guide/#configuration-options",children:"Knex config documentation"}),"."]})]}),"\n",(0,s.jsx)(n.p,{children:"As usual, you can/should adjust all of this to your specific project."}),"\n",(0,s.jsxs)(n.p,{children:["Now your unit tests should be able to create an ",(0,s.jsx)(n.code,{children:"EntityManager"})," and work with the domain objects:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { Author, EntityManager, newAuthor } from "src/entities";\nimport { newEntityManager } from "src/setupTests";\n\ndescribe("Author", () => {\n  it("can be created", async () => {\n    const em = newEntityManager();\n    const a = new Author(em, { firstName: "a1" });\n    await em.flush();\n  });\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-your-production-code",children:"Setting up your production code"}),"\n",(0,s.jsxs)(n.p,{children:["Finally, you can use the ",(0,s.jsx)(n.code,{children:"EntityManager"})," and your domain objects in your production code."]}),"\n",(0,s.jsxs)(n.p,{children:["First install the ",(0,s.jsx)(n.code,{children:"joist-orm"})," dependency:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm add --save-dev joist-orm\n"})}),"\n",(0,s.jsx)(n.p,{children:'This is where the guide really becomes "it depends on your application", but in theory it will look very similar to setting up the tests:'}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Configure a single/global ",(0,s.jsx)(n.code,{children:"knex"})," instance that will act as the connection pool,"]}),"\n",(0,s.jsxs)(n.li,{children:["For each request, create a new ",(0,s.jsx)(n.code,{children:"EntityManager"})," to perform that request's work"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"An extremely simple example might look like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { EntityManager, Author } from "./entities";\nimport { newPgConnectionConfig, PostgresDriver } from "joist-orm";\nimport { knex as createKnex, Knex } from "knex";\n\n// Create our global knex connection\nlet knex: Knex = createKnex({\n  client: "pg",\n  connection: newPgConnectionConfig(),\n  debug: false,\n  asyncStackTraces: true,\n});\n\n// Create a helper method for our requests to create a new EntityManager\nfunction newEntityManager(): EntityManager {\n  // If you have a per-request context object, you can create that here\n  const ctx = {};\n  return new EntityManager(ctx, new PostgresDriver(getKnex()));\n}\n\n// Handle GET `/authors`\napp.get("/authors", async (req, res) => {\n  // Create a new em\n  const em = newEntityManager();\n  // Find all authors\n  const authors = await em.find(Author, {});\n  // Send them back as JSON\n  res.send(authors);\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Note that you'll again need the ",(0,s.jsx)(n.code,{children:"DATABASE_URL"})," environment variable set, but that will depend on whatever hosting provider you're using to run the app (or, per the previous disclaimer, you're free to configure the ",(0,s.jsx)(n.code,{children:"Knex"})," connection pool with whatever configuration approach/library you like)."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1670:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var s=t(7378);const i={},o=s.createContext(i);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);