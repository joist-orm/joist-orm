"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[801],{3007:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=n(4246),i=n(1670);const a={},l=void 0,s={id:"advanced/graphql-filters",title:"graphql-filters",description:"GraphQL-Compatible Filters",source:"@site/docs/advanced/graphql-filters.md",sourceDirName:"advanced",slug:"/advanced/graphql-filters",permalink:"/docs/advanced/graphql-filters",draft:!1,unlisted:!1,editUrl:"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/advanced/graphql-filters.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Full Text Search",permalink:"/docs/advanced/full-text-search"},next:{title:"FAQ",permalink:"/docs/faq"}},o={},d=[{value:"GraphQL-Compatible Filters",id:"graphql-compatible-filters",level:3}];function c(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"graphql-compatible-filters",children:"GraphQL-Compatible Filters"}),"\n",(0,r.jsxs)(t.p,{children:["Joist's ",(0,r.jsx)(t.code,{children:"find"}),' supports the standard "filter as object literal" pattern, i.e.']}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"const authors = em.find(Author, { age: { gte: 20 } });\n"})}),"\n",(0,r.jsxs)(t.p,{children:["And the generated ",(0,r.jsx)(t.code,{children:"AuthorFilter"})," type that drives this query is fairly picky, i.e. ",(0,r.jsx)(t.code,{children:"age: null"})," is not a valid query if the age column is not null."]}),"\n",(0,r.jsxs)(t.p,{children:["This works great for TypeScript code, but when doing interop with GraphQL (i.e. via types generated by graphql-code-generator), Joist's normal ",(0,r.jsx)(t.code,{children:"AuthorFilter"})," typing is \"too good\", i.e. while GraphQL's type system is great, it is more coarse than TypeScript's, so you end up with things like ",(0,r.jsx)(t.code,{children:"age: number | null | undefined"})," on the GQL filter type."]}),"\n",(0,r.jsxs)(t.p,{children:["To handle this, Joist generates separate GraphQL-specific filter types, i.e. ",(0,r.jsx)(t.code,{children:"AuthorGraphQLFilter"}),", that can fairly seamlessly integrate with GraphQL queries with a dedicated ",(0,r.jsx)(t.code,{children:"findGql"})," query methods."]}),"\n",(0,r.jsx)(t.p,{children:"I.e. given some generated GraphQL types like:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"/** Example AuthorFilter generated by graphql-code-generator. */\ninterface GraphQLAuthorFilter {\n  age?: GraphQLIntFilter | null | undefined;\n}\n\n/** Example IntFilter generated by graphql-code-generator. */\ninterface GraphQLIntFilter {\n  eq?: number | null | undefined;\n  in?: number[] | null | undefined;\n  lte?: number | null | undefined;\n  lt?: number | null | undefined;\n  gte?: number | null | undefined;\n  gt?: number | null | undefined;\n  ne?: number | null | undefined;\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Joist's ",(0,r.jsx)(t.code,{children:"EntityManager.findGql"}),' will accept the filter type as-is / "directly off the wire" without any cumbersome mapping:']}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// I.e. from the GraphQL args.filter parameter\nconst gqlFilter: GraphQLAuthorFilter = {\n  age: { eq: 2 },\n};\nconst authors = await em.findGql(Author, gqlFilter);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Also note that while the ",(0,r.jsx)(t.code,{children:"age: { eq: 2 }"}),' is a really clean way to write filters by hand, it can be annoying to dynamically create, i.e. in a UI that needs to conditionally change the operator from "equals" to "not equals", because there is not a single key to bind against in the input type.']}),"\n",(0,r.jsxs)(t.p,{children:["To make building these UIs easier, ",(0,r.jsx)(t.code,{children:"findGql"}),' also accepts a "more-boring" ',(0,r.jsx)(t.code,{children:'{ op: "gt", value: 1 }'})," syntax. The value of the ",(0,r.jsx)(t.code,{children:"op"})," key can be any of the supported operators, i.e. ",(0,r.jsx)(t.code,{children:"gt"}),", ",(0,r.jsx)(t.code,{children:"lt"}),", ",(0,r.jsx)(t.code,{children:"gte"}),", ",(0,r.jsx)(t.code,{children:"ne"}),", etc."]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},1670:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>l});var r=n(7378);const i={},a=r.createContext(i);function l(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);