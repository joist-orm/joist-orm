"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1477],{9334:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>a});var t=n(4246),o=n(1670);const s={title:"Field Logging",sidebar_position:1},l=void 0,r={id:"logging/field-logging",title:"Field Logging",description:"Joist provides field logging to visualize when/why fields are being set on entities.",source:"@site/docs/logging/field-logging.md",sourceDirName:"logging",slug:"/logging/field-logging",permalink:"/docs/logging/field-logging",draft:!1,unlisted:!1,editUrl:"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/logging/field-logging.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Field Logging",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"FAQ",permalink:"/docs/faq"},next:{title:"Reaction Logging",permalink:"/docs/logging/reaction-logging"}},d={},a=[{value:"Usage",id:"usage",level:2},{value:"Filtering by Entity",id:"filtering-by-entity",level:3},{value:"Filtering by Entity and Field",id:"filtering-by-entity-and-field",level:3},{value:"Enabling Breakpoints",id:"enabling-breakpoints",level:3},{value:"Colorized Output",id:"colorized-output",level:2}];function g(e){const i={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.p,{children:"Joist provides field logging to visualize when/why fields are being set on entities."}),"\n",(0,t.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,t.jsxs)(i.p,{children:["Field logging is currently enabled on an individual ",(0,t.jsx)(i.code,{children:"EntityManager"})," instance:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:'import { FieldLogger} from "joist-orm";\n// This will log any field set field sets on this EntityManager\nem.setFieldLogging(new FieldLogger());\n'})}),"\n",(0,t.jsx)(i.p,{children:"This will produce output like:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"a#1.firstName = a1 at newAuthor.ts:13\na#1.age = 40 at newAuthor.ts:13\nb#1.title = title at newBook.ts:9\nb#1.order = 1 at newBook.ts:9\nb#1.author = Author#1 at newBook.ts:9\nb#1.notes = Notes for title at defaults.ts:28\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Where ",(0,t.jsx)(i.code,{children:"a#1"})," is the tagged id of a new/unsaved ",(0,t.jsx)(i.code,{children:"Author"})," instance, and ",(0,t.jsx)(i.code,{children:"b#"})," is the tagged if of a new/unsaved ",(0,t.jsx)(i.code,{children:"Book"})," instance."]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"at (file):(line)"}),", which should help track down which hook or method is setting the field."]}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["The code that determines the correct ",(0,t.jsx)(i.code,{children:"at (file):(line)"})," to output is currently a heuristic; if you see incorrect or missing file/line information, please file an issue. Thank you!"]})}),"\n",(0,t.jsx)(i.h3,{id:"filtering-by-entity",children:"Filtering by Entity"}),"\n",(0,t.jsxs)(i.p,{children:["If you want to log only sets for a specific entity type, you can pass a ",(0,t.jsx)(i.code,{children:"watches"})," argument to the ",(0,t.jsx)(i.code,{children:"FieldLogger"})," constructor:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:'em.setFieldLogging(new FieldLogger(\n  [{ entity: "Author" }],\n));\n'})}),"\n",(0,t.jsx)(i.h3,{id:"filtering-by-entity-and-field",children:"Filtering by Entity and Field"}),"\n",(0,t.jsxs)(i.p,{children:["If you want to log only sets for a specific entity ",(0,t.jsx)(i.em,{children:"and"})," field name, you can pass a ",(0,t.jsx)(i.code,{children:"watches"})," argument to the ",(0,t.jsx)(i.code,{children:"FieldLogger"})," constructor:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:'em.setFieldLogging(new FieldLogger(\n  [{ entity: "Author", fieldNames: ["firstName"] }],\n));\n'})}),"\n",(0,t.jsx)(i.h3,{id:"enabling-breakpoints",children:"Enabling Breakpoints"}),"\n",(0,t.jsx)(i.p,{children:"If you're running code in debug mode, you can also tell Joist to trigger a breakpoint, whenever a field is set:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ts",children:'em.setFieldLogging(new FieldLogger(\n  [{ entity: "Author", fieldNames: ["firstName"], breakpoint: true }],\n));\n'})}),"\n",(0,t.jsx)(i.h2,{id:"colorized-output",children:"Colorized Output"}),"\n",(0,t.jsxs)(i.p,{children:["Currently, the ",(0,t.jsx)(i.code,{children:"FieldLogger"})," always output colorized output, similar to Joist's other logging output."]}),"\n",(0,t.jsx)(i.p,{children:"This makes for the best experience with running/debugging tests, like in Jest, which is currently the primary use case for Joist's logging."})]})}function c(e={}){const{wrapper:i}={...(0,o.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},1670:(e,i,n)=>{n.d(i,{Z:()=>r,a:()=>l});var t=n(7378);const o={},s=t.createContext(o);function l(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);