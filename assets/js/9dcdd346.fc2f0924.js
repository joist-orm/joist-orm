"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5176],{3023:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>r});var t=n(3696);const o={},s=t.createContext(o);function l(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(s.Provider,{value:i},e.children)}},3623:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"logging/field-logging","title":"Field Logging","description":"Joist provides field logging to visualize when/why fields are being set on entities.","source":"@site/docs/logging/field-logging.md","sourceDirName":"logging","slug":"/logging/field-logging","permalink":"/docs/logging/field-logging","draft":false,"unlisted":false,"editUrl":"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/logging/field-logging.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Field Logging","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"FAQ","permalink":"/docs/faq"},"next":{"title":"Reaction Logging","permalink":"/docs/logging/reaction-logging"}}');var o=n(2540),s=n(3023);const l={title:"Field Logging",sidebar_position:1},r=void 0,d={},a=[{value:"Usage",id:"usage",level:2},{value:"Filtering Shorthand",id:"filtering-shorthand",level:3},{value:"Filtering by Entity &amp; Fields",id:"filtering-by-entity--fields",level:3},{value:"Enabling Breakpoints",id:"enabling-breakpoints",level:3},{value:"Colorized Output",id:"colorized-output",level:2}];function g(e){const i={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.p,{children:"Joist provides field logging to visualize when/why fields are being set on entities."}),"\n",(0,o.jsx)(i.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(i.p,{children:["Field logging is currently enabled on an individual ",(0,o.jsx)(i.code,{children:"EntityManager"})," instance:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-ts",children:"// Logs all field sets on this EntityManager\nem.setFieldLogging(true);\n"})}),"\n",(0,o.jsx)(i.p,{children:"This will produce console output like:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"a#1.firstName = a1 at newAuthor.ts:13\na#1.age = 40 at newAuthor.ts:13\nb#1.title = title at newBook.ts:9\nb#1.order = 1 at newBook.ts:9\nb#1.author = Author#1 at newBook.ts:9\nb#1.notes = Notes for title at defaults.ts:28\n"})}),"\n",(0,o.jsxs)(i.p,{children:["Where ",(0,o.jsx)(i.code,{children:"a#1"})," is the tagged id of a new/unsaved ",(0,o.jsx)(i.code,{children:"Author"})," instance, and ",(0,o.jsx)(i.code,{children:"b#"})," is the tagged id of a new/unsaved ",(0,o.jsx)(i.code,{children:"Book"})," instance."]}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(i.code,{children:"at (file):(line)"}),", which should help track down which hook or method is setting the field."]}),"\n",(0,o.jsx)(i.admonition,{type:"info",children:(0,o.jsxs)(i.p,{children:["The code that determines the correct ",(0,o.jsx)(i.code,{children:"at (file):(line)"})," to output is currently a heuristic; if you see incorrect or missing file/line information, please file an issue. Thank you!"]})}),"\n",(0,o.jsx)(i.h3,{id:"filtering-shorthand",children:"Filtering Shorthand"}),"\n",(0,o.jsx)(i.p,{children:'If you want to quickly setup field logging, we support a string "spec" shorthand:'}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-ts",children:'// Single entity, multiple fields\nem.setFieldLogging("Author.firstName,lastName");\n// Multiple entities, breakpoints enabled\nem.setFieldLogging(["Author.lastName", "Book.title!"]);\n'})}),"\n",(0,o.jsx)(i.h3,{id:"filtering-by-entity--fields",children:"Filtering by Entity & Fields"}),"\n",(0,o.jsxs)(i.p,{children:["If you want to log only sets for a specific entity, or certain fields, you can pass a ",(0,o.jsx)(i.code,{children:"watches"})," argument to the ",(0,o.jsx)(i.code,{children:"FieldLogger"})," constructor:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-ts",children:'em.setFieldLogging(new FieldLogger([\n  // Log all field sets for Authors\n  { entity: "Author" },\n  // Log only title changes to Books\n  { entity: "Book", fieldNames: ["title"] },\n]));\n'})}),"\n",(0,o.jsx)(i.h3,{id:"enabling-breakpoints",children:"Enabling Breakpoints"}),"\n",(0,o.jsx)(i.p,{children:"If you're running in debug mode, you can tell Joist to trigger a breakpoint on the field set:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-ts",children:'// Use a ! shorthand in the spec string\nem.setFieldLogging("Author.firstName!");\n// Or pass `breakpoint: true` to the FieldLogger constructor\nem.setFieldLogging(new FieldLogger(\n  [{ entity: "Author", fieldNames: ["firstName"], breakpoint: true }],\n));\n'})}),"\n",(0,o.jsxs)(i.p,{children:["And your debugger will stop anytime the ",(0,o.jsx)(i.code,{children:"firstName"})," field is mutated."]}),"\n",(0,o.jsx)(i.p,{children:'This can be extremely useful for finding "who" is setting/changing a field in more complex/multi-step scenarios.'}),"\n",(0,o.jsx)(i.h2,{id:"colorized-output",children:"Colorized Output"}),"\n",(0,o.jsxs)(i.p,{children:["Currently, the ",(0,o.jsx)(i.code,{children:"FieldLogger"})," always output colorized output, similar to Joist's other logging output."]}),"\n",(0,o.jsx)(i.p,{children:"This makes for the best experience with running/debugging tests, like in Jest, which is currently the primary use case for Joist's logging."})]})}function c(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}}}]);