"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[570],{4221:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var o=n(2540),i=n(3023);const s={title:"Factory Logging",sidebar_position:3},r=void 0,c={id:"logging/factory-logging",title:"Factory Logging",description:"Joist provides factory logging to visualize how factories create entities.",source:"@site/docs/logging/factory-logging.md",sourceDirName:"logging",slug:"/logging/factory-logging",permalink:"/docs/logging/factory-logging",draft:!1,unlisted:!1,editUrl:"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/logging/factory-logging.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Factory Logging",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Reaction Logging",permalink:"/docs/logging/reaction-logging"},next:{title:"Test Factories",permalink:"/docs/testing/test-factories"}},a={},l=[{value:"Usage",id:"usage",level:2},{value:"Output Terminology",id:"output-terminology",level:2},{value:"Colorized Output",id:"colorized-output",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Joist provides factory logging to visualize how factories create entities."}),"\n",(0,o.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(t.p,{children:["Factory logging can be enabled globally by calling ",(0,o.jsx)(t.code,{children:"setFactoryLogging"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'import { setFactoryLogging } from "joist-orm";\nsetFactoryLogging(true);\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Or enabled on individual factory calls using ",(0,o.jsx)(t.code,{children:"useLogging"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:"const b1 = newBook(em, { useLogging: true });\n"})}),"\n",(0,o.jsx)(t.p,{children:"Both will create output like:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"Creating new Book at EntityManager.factories.test.ts:51\n  author = creating new Author\n    created Author#1 added to scope\n  created Book#1 added to scope\n"})}),"\n",(0,o.jsx)(t.p,{children:"Where level of indentation shows the factories creating a required entity."}),"\n",(0,o.jsxs)(t.p,{children:["I.e. the above output shows how creating a book requires an ",(0,o.jsx)(t.code,{children:"Author"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"output-terminology",children:"Output Terminology"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"created (entity) added to scope"})}),"\n",(0,o.jsxs)(t.p,{children:["Each factory call, i.e. ",(0,o.jsx)(t.code,{children:"newBook"}),", creates a scope/cache of entities that it uses or has created, to prevent creating the same entity multiple times."]}),"\n",(0,o.jsxs)(t.p,{children:["When you see the ",(0,o.jsx)(t.code,{children:"added to scope"})," message, it means that the entity was created and added to the scope, and so might later be used for another field/relation later within the same factory call."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"...adding (entity) opt to scope"})}),"\n",(0,o.jsxs)(t.p,{children:["When you pass existing entities to a factory, i.e. ",(0,o.jsx)(t.code,{children:"newBook(em, { author })"}),", any entity found within the opts param are automatically added to the scope cache."]}),"\n",(0,o.jsxs)(t.p,{children:["The rationale is that the ",(0,o.jsx)(t.code,{children:"author'"}),"s presence in ",(0,o.jsx)(t.code,{children:"opts"}),' signifies it\'s likely "the most relevant author" for any other author lookup within this ',(0,o.jsx)(t.code,{children:"newBook"})," call."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"(field) = (entity) from scope"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"field"})," was assigned an ",(0,o.jsx)(t.code,{children:"entity"})," that we found in the scope cache, i.e. that the top-level factory call had previously created this entity, or had this entity seeded into the scope cache from an opt parameter."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.code,{children:"(field) = (entity) from opt"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"field"})," was assigned an ",(0,o.jsx)(t.code,{children:"entity"})," that was explicitly passed as an opt/parameter to the factory call."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"colorized-output",children:"Colorized Output"}),"\n",(0,o.jsx)(t.p,{children:"Currently, the factory logging always output colorized output, similar to Joist's other logging output."}),"\n",(0,o.jsx)(t.p,{children:"This makes for the best experience with running/debugging tests, like in Jest, which is currently the primary use case for Joist's logging."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},3023:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var o=n(3696);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);