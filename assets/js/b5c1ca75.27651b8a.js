"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5088],{3023:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(3696);const o={},i=s.createContext(o);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},8104:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"advanced/json-payloads","title":"Json Payloads","description":"If you\'re using Joist for a REST API, or in React Server components passing props to client-side components, the toJSON function can succinctly and type-safely create JSON output.","source":"@site/docs/advanced/json-payloads.md","sourceDirName":"advanced","slug":"/advanced/json-payloads","permalink":"/docs/advanced/json-payloads","draft":false,"unlisted":false,"editUrl":"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/advanced/json-payloads.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Json Payloads","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Recursive Relations","permalink":"/docs/advanced/recursive-relations"},"next":{"title":"Lens Traversal","permalink":"/docs/advanced/lenses"}}');var o=t(2540),i=t(3023);const a={title:"Json Payloads",sidebar_position:5},r=void 0,d={},l=[{value:"Basic Usage",id:"basic-usage",level:3},{value:"Outputting Lists",id:"outputting-lists",level:3},{value:"Outputting Ids",id:"outputting-ids",level:3},{value:"Custom Fields",id:"custom-fields",level:3}];function c(e){const n={admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["If you're using Joist for a REST API, or in React Server components passing props to client-side components, the ",(0,o.jsx)(n.code,{children:"toJSON"})," function can succinctly and type-safely create JSON output."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"Creating JSON Payloads is a newer feature of Joist, so if you have ideas on how to make it even better, please let us know!"})}),"\n",(0,o.jsx)(n.h3,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsxs)(n.p,{children:["For example, given a ",(0,o.jsx)(n.code,{children:"Author"})," entity, we can use ",(0,o.jsx)(n.code,{children:"toJSON"})," to create a tree of output:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'const a = await em.load(Author, "a:1");\n// Describe the shape of your payload\nconst payload = await a.toJSON({\n  id: true,\n  books: { id: true, reviews: { rating: true } }\n});\n// payload will be typed with only the keys you requested\nconsole.log(payload);\n'})}),"\n",(0,o.jsx)(n.p,{children:"This will create the JSON:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "id": "a:1",\n  "books": [\n    {\n      "id": "b:1",\n      "reviews": [\n        { "rating": 5 },\n        { "rating": 4 }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Note how:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"books"})," and ",(0,o.jsx)(n.code,{children:"books.reviews"})," collections are automatically loaded","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"If you've already loaded the collections, they won't be reloaded"}),"\n",(0,o.jsx)(n.li,{children:"If you have preloading enabled, this will make 1 SQL call to load all books & book reviews"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Only fields that are explicitly requested are included in the output"}),"\n",(0,o.jsx)(n.li,{children:"The output is correctly typed, for type-checking against your API response types"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"outputting-lists",children:"Outputting Lists"}),"\n",(0,o.jsxs)(n.p,{children:["If you have an array of entities to output, you can use the static ",(0,o.jsx)(n.code,{children:"toJSON"})," function:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { toJSON } from "joist-orm";\nconst authors = await em.find(Author, {});\nconst jsonArray = await toJSON(\n  authors,\n  { id, books: { id, reviews: { rating } }  \n});\n'})}),"\n",(0,o.jsx)(n.h3,{id:"outputting-ids",children:"Outputting Ids"}),"\n",(0,o.jsxs)(n.p,{children:["Often APIs will request the id of an entity, so ",(0,o.jsx)(n.code,{children:"toJSON"})," supports ",(0,o.jsx)(n.code,{children:"Id"})," and ",(0,o.jsx)(n.code,{children:"Ids"}),"-based suffixes:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'const a = await em.load(Author, "a:1");\nconst payload = await a.toJSON({\n  publisherId: true,\n  bookIds: true,\n});\n// returns { publisherId: "p:1", bookIds: ["b:1", "b:2"] }\n'})}),"\n",(0,o.jsx)(n.h3,{id:"custom-fields",children:"Custom Fields"}),"\n",(0,o.jsx)(n.p,{children:"If you need to create JSON fields that are not 1-1 mapped to an entity, you can add async functions to the hint, and they will be called with the entity as the first argument:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'const a = await em.load(Author, "a:1");\nconsole.log(await a.toJSON({\n  books: {\n    customTitle: async (b) => {\n      return b.title + " by " + (await b.author.get).name;\n    }\n  }\n}));\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);