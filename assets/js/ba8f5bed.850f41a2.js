"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[179],{2374:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>d,metadata:()=>l,toc:()=>c});var o=s(4246),n=s(1670);const d={title:"Soft Deletes",sidebar_position:3},i=void 0,l={id:"advanced/soft-deletes",title:"Soft Deletes",description:'Joist has built-in support for the soft-delete pattern, of marking rows with a deleted_at column and then "mostly ignoring them" within the application.',source:"@site/docs/advanced/soft-deletes.md",sourceDirName:"advanced",slug:"/advanced/soft-deletes",permalink:"/docs/advanced/soft-deletes",draft:!1,unlisted:!1,editUrl:"https://github.com/joist-orm/joist-orm/edit/main/docs/docs/advanced/soft-deletes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Soft Deletes",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Tagged Ids",permalink:"/docs/advanced/tagged-ids"},next:{title:"Entity Cloning",permalink:"/docs/advanced/cloning"}},a={},c=[{value:"Setup",id:"setup",level:2},{value:"Load/Populate Behavior",id:"loadpopulate-behavior",level:2},{value:"Find Queries",id:"find-queries",level:2}];function r(e){const t={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Joist has built-in support for the soft-delete pattern, of marking rows with a ",(0,o.jsx)(t.code,{children:"deleted_at"}),' column and then "mostly ignoring them" within the application.']}),"\n",(0,o.jsxs)(t.p,{children:['In our experience, it\'s common to have application bugs where business logic "forgets to ignore soft-deleted rows", so Joist flips the model to where soft-deleted rows are ',(0,o.jsx)(t.em,{children:"ignored by default"}),", and business logic needs to explicitly opt-in to seeing them."]}),"\n",(0,o.jsx)(t.h2,{id:"setup",children:"Setup"}),"\n",(0,o.jsxs)(t.p,{children:["To use Joist's soft-delete support, just add ",(0,o.jsx)(t.code,{children:"deleted_at"})," columns to any entity you want to soft-delete."]}),"\n",(0,o.jsxs)(t.p,{children:["By default, Joist will pick up any column named ",(0,o.jsx)(t.code,{children:"deleted_at"})," or ",(0,o.jsx)(t.code,{children:"deletedAt"})," as a soft-delete column, and use it for implicit filtering."]}),"\n",(0,o.jsxs)(t.p,{children:["If you want to change the name of the ",(0,o.jsx)(t.code,{children:"deleted_at"})," column, you can configure that in ",(0,o.jsx)(t.code,{children:"joist-config.json"}),"'s ",(0,o.jsx)(t.code,{children:"timestampFields"})," key:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",children:'{\n  "timestampFields": {\n    "deletedAt": {\n      "names": ["deleted_at"]\n    }\n  }\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Note that currently Joist assumes that ",(0,o.jsx)(t.code,{children:"deleted_at"})," columns are timestamps, but they should work as ",(0,o.jsx)(t.code,{children:"boolean"})," columns as well."]}),"\n",(0,o.jsx)(t.h2,{id:"loadpopulate-behavior",children:"Load/Populate Behavior"}),"\n",(0,o.jsxs)(t.p,{children:["When entities are soft-deleted, Joist's ",(0,o.jsx)(t.code,{children:"populate"})," methods will still fetch their rows from the database, but collection accessors (i.e. ",(0,o.jsx)(t.code,{children:"o2m.get"})," and ",(0,o.jsx)(t.code,{children:"m2m.get"}),") will filter them out of the results."]}),"\n",(0,o.jsxs)(t.p,{children:["For example, if an ",(0,o.jsx)(t.code,{children:"Author"})," has a soft-deleted ",(0,o.jsx)(t.code,{children:"Book"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:'// This loads all books for a:1 from the db\nconst a = await em.load(Author, "a:1", "books");\n// This list will not include any soft-deletes books\nconsole.log(a.books.get);\n'})}),"\n",(0,o.jsxs)(t.p,{children:["If you do want to explicitly access soft-deleted rows, you can use the ",(0,o.jsx)(t.code,{children:"getWithDeleted"})," accessor:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",children:"// This list will be everything\nconsole.log(a.books.getWithDeleted);\n"})}),"\n",(0,o.jsx)(t.h2,{id:"find-queries",children:"Find Queries"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"em.find"})," queries also filter out soft-deleted rows by default but at the database level (by adding a ",(0,o.jsx)(t.code,{children:"WHERE deleted_at IS NULL"})," to the query)."]}),"\n",(0,o.jsxs)(t.p,{children:["If you'd like to include soft-deleted rows in a ",(0,o.jsx)(t.code,{children:"find"})," query, you can use the ",(0,o.jsx)(t.code,{children:"softDeletes"})," option:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'const allBooks = await em.find(Book, {}, { softDeletes: "include" });\n'})})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(r,{...e})}):r(e)}},1670:(e,t,s)=>{s.d(t,{Z:()=>l,a:()=>i});var o=s(7378);const n={},d=o.createContext(n);function i(e){const t=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(d.Provider,{value:t},e.children)}}}]);