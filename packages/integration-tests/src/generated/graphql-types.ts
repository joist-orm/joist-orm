// Normally projects would have this file generated by graphql-code-generator,
// but here we're just hand-coding it for proof-of-concept/diff-based verification.
import { Context } from "@src/context";
import {
  AdvanceStatus,
  Author,
  AuthorStat,
  Book,
  BookAdvance,
  BookReview,
  Color,
  Comment,
  Critic,
  Image,
  ImageType,
  Publisher,
  PublisherSize,
  PublisherType,
  Tag,
} from "@src/entities";

export type Resolver<R, A, T> = (root: R, args: A, ctx: Context, info: any) => T | Promise<T>;

export type AuthorResolvers = {
  firstName(root: Author): Promise<string>;
};
export type AuthorStatResolvers = {
  smallint(root: AuthorStat): Promise<number>;
};
export type BookResolvers = {
  title(root: Book): Promise<string>;
};
export type BookAdvanceResolvers = {
  status(root: BookAdvance): Promise<AdvanceStatus>;
};
export type BookReviewResolvers = {
  rating(root: BookReview): Promise<number>;
};
export type CommentResolvers = {
  comment(root: Comment): Promise<string>;
};
export type ImageResolvers = {
  fileName(root: Image): Promise<string>;
};
export type PublisherResolvers = {
  name(root: Publisher): Promise<string>;
};
export type TagResolvers = {
  name(root: Tag): Promise<string>;
};
export type CriticResolvers = {
  name(root: Critic): Promise<string>;
};

export type SaveAuthorInput = {};
export type SaveBookInput = {};
export type SaveAuthorStatInput = {};
export type SaveBookAdvanceInput = {};
export type SaveBookReviewInput = {};
export type SaveCommentInput = {};
export type SaveImageInput = {};
export type SavePublisherInput = {};
export type SaveTagInput = {};
export type SaveCriticInput = {};

export type MutationResolvers = {
  saveAuthor(root: any, args: any, ctx: Context, info: any): any;
  saveAuthorStat(root: any, args: any, ctx: Context, info: any): any;
  saveBook(root: any, args: any, ctx: Context, info: any): any;
  saveBookAdvance(root: any, args: any, ctx: Context, info: any): any;
  saveBookReview(root: any, args: any, ctx: Context, info: any): any;
  saveComment(root: any, args: any, ctx: Context, info: any): any;
  saveImage(root: any, args: any, ctx: Context, info: any): any;
  savePublisher(root: any, args: any, ctx: Context, info: any): any;
  saveTag(root: any, args: any, ctx: Context, info: any): any;
  saveCritic(root: any, args: any, ctx: Context, info: any): any;
};

export type Resolvers = {
  PublisherSizeDetail: {
    code: (root: PublisherSize) => string;
    name: (root: PublisherSize) => string;
  };

  PublisherTypeDetail: {
    code: (root: PublisherType) => string;
    name: (root: PublisherType) => string;
  };

  ImageTypeDetail: {
    code: (root: ImageType) => string;
    name: (root: ImageType) => string;
    sortOrder: (root: ImageType) => number;
    visible: (root: ImageType) => boolean;
    nickname: (root: ImageType) => string;
  };

  AdvanceStatusDetail: {
    code: (root: AdvanceStatus) => string;
    name: (root: AdvanceStatus) => string;
  };

  ColorDetail: {
    code: (root: Color) => string;
    name: (root: Color) => string;
  };
};
